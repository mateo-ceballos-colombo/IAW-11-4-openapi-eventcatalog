openapi: 3.0.3
info:
  title: Order Service API
  version: 1.0.0
  description: API REST para gestión de órdenes y emisión de eventos OrderCreated.
servers:
  - url: http://localhost:3100
tags:
  - name: system
    description: Endpoints de sistema y monitoreo.
  - name: orders
    description: Operaciones CRUD y búsqueda sobre órdenes.
paths:
  /health:
    get:
      summary: Verifica el estado del servicio
      description: Retorna un objeto con el estado general y timestamp para monitoreo.
      operationId: getHealth
      tags: [system]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
  /orders:
    get:
      summary: Lista todas las órdenes
      description: Recupera todas las órdenes en la base de datos con su estado actual.
      operationId: listOrders
      tags: [orders]
      responses:
        '200':
          description: Lista de órdenes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Crea una nueva orden y publica el evento OrderCreated
      description: Valida el payload, persiste la orden y emite el evento de dominio OrderCreated en RabbitMQ.
      operationId: createOrder
      tags: [orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderInput'
      responses:
        '201':
          description: Orden creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
  /orders/{id}:
    get:
      summary: Obtiene una orden por ID
      description: Busca y devuelve la orden correspondiente al identificador proporcionado.
      operationId: getOrderById
      tags: [orders]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orden encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No encontrada
    put:
      summary: Actualiza los items de una orden
      description: Reemplaza el arreglo completo de items y recalcula el total de la orden.
      operationId: updateOrderItems
      tags: [orders]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItem'
              required: [items]
      responses:
        '200':
          description: Orden actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No encontrada
    delete:
      summary: Cancela una orden existente (status = CANCELLED)
      description: |
        Marca la orden como CANCELLED si existe y devuelve la versión modificada.
        
        **Versión futura**: Este endpoint publicará el evento `OrderCancelled` en RabbitMQ, permitiendo que servicios downstream (inventario, facturación, notificaciones) reaccionen de forma desacoplada a la cancelación.
        
        Ver documentación del evento en el Event Catalog: `eventcatalog/events/OrderCancelled/README.md` o navegando a http://localhost:3000 (Event Catalog dev) → Discover > Events > OrderCancelled.
        
        **Compatibilidad**: La transición CREATED → CANCELLED es aditiva y no elimina campos existentes. Los consumidores pueden detectar el cambio inspeccionando el campo `status`.
        
        **Objetivo pedagógico**: Demostrar cómo documentar endpoints que evolucionarán para soportar arquitectura event-driven, manteniendo sincronía entre OpenAPI y Event Catalog.
      operationId: cancelOrder
      tags: [orders]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Orden cancelada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No encontrada
  /orders/search:
    get:
      summary: Busca órdenes por nombre de cliente
      description: Realiza una búsqueda case-insensitive por coincidencia parcial en el nombre del cliente.
      operationId: searchOrdersByCustomer
      tags: [orders]
      parameters:
        - name: customer
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resultados de la búsqueda
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Parámetro faltante
  /orders/stats:
    get:
      summary: Estadísticas agregadas de órdenes
      description: |
        Devuelve cantidad total de órdenes, revenue acumulado y promedio por orden. Útil para monitoreo simple sin analytics externo.
        
        **Objetivo pedagógico**: Este endpoint demuestra cómo realizar agregaciones básicas directamente en la API sin depender de herramientas de analytics externas. Es ideal para dashboards internos, alertas simples o pruebas de concepto.
        
        En aplicaciones a escala, considerar delegar estas métricas a sistemas especializados (ej. data warehouse, time-series DB) para evitar impacto en la base de datos transaccional.
        
        **Ejemplo de uso**: Monitoreo de salud del negocio, KPIs operacionales, alertas cuando `avgOrderValue` cae por debajo de un umbral.
      operationId: getOrderStats
      tags: [orders]
      responses:
        '200':
          description: Estadísticas calculadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  totalRevenue:
                    type: number
                  avgOrderValue:
                    type: number
components:
  schemas:
    OrderItem:
      type: object
      properties:
        sku:
          type: string
        quantity:
          type: integer
        price:
          type: number
      required: [sku, quantity, price]
    CreateOrderInput:
      type: object
      properties:
        customerName:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required: [customerName, items]
    Order:
      allOf:
        - $ref: '#/components/schemas/CreateOrderInput'
        - type: object
          properties:
            id:
              type: string
            total:
              type: number
            createdAt:
              type: string
              format: date-time
            status:
              type: string
              enum: [CREATED, CANCELLED]
          required: [id, total, createdAt]
